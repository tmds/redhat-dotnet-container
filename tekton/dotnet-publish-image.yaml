apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: dotnet-publish-image
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.19"
    tekton.dev/tags: dotnet, workspace
    tekton.dev/displayName: "dotnet publish image"
spec:
  description: >-
    dotnet-publish-image task builds a container image from a .NET project
    and pushes it to a container registry.
  results:
    - name: IMAGE_DIGEST
      description: Digest of the image.
    - name: IMAGE
      description: Fully qualified image name of the image.
  params:
    - name: PROJECT
      description: Path of the .NET project file.
      type: string
    - name: IMAGE_NAME
      description: |
        Name of the image repository to push. When it does not include a registry, it is pushed to the internal cluster registry.
        If no namespace is included, the current namespace is prepended to the name.
      type: string
    - name: SDK_VERSION
      default: latest
      description: Tag of .NET SDK imagestream.
      type: string
    - name: DOTNET_NAMESPACE
      description: Namespace of the .NET imagestreams. Set to '$(context.taskRun.namespace)' to use the pipeline namespace.
      default: openshift
      type: string
    - name: USE_DOTNET_IMAGESTREAM_BASE_IMAGES
      description: Set to 'true' to build the application image using .NET imagestream base images.
      default: "true"
      type: string
    - name: VERBOSITY
      description: MSBuild verbosity level. Allowed values are 'q[uiet]', 'm[inimal]', 'n[ormal]', 'd[etailed]', and 'diag[nostic]'.
      default: "minimal"
      type: string
    - name: ENV_VARS
      type: array
      description: Environment variables.
      default: []
  workspaces:
    - name: source
      mountPath: /workspace/source
    - name: dockerconfig
      description: >-
        An optional workspace that allows providing a .docker/config.json file to access the container registry.
        The file should be placed at the root of the Workspace with name config.json or .dockerconfigjson.
      optional: true
    - name: dotnetconfig
      description: >-
        An optional workspace that allows providing common configuration for .NET Tekton tasks.
        If a 'setup' file is present, its contents get executed before running the script.
        If a 'Build.props' file is present, it will be loaded by the .NET SDK through CustomBeforeDirectoryBuildProps.
      optional: true
  steps:
    - name: publish-image
      image: image-registry.openshift-image-registry.svc:5000/$(params.DOTNET_NAMESPACE)/dotnet:$(params.SDK_VERSION)
      args:
        - "--env-vars"
        - "$(params.ENV_VARS[*])"
      env:
      - name: OpenShiftInternalRegistry
        value: "image-registry.openshift-image-registry.svc:5000"
      - name: OpenShiftDotnetNamespace
        value: $(params.DOTNET_NAMESPACE)
      - name: OpenShiftCurrentNamespace
        value: $(context.taskRun.namespace)
      - name: RunningInTekton
        value: "true"
      - name: DOTNETCONFIG_DIRECTORY_BOUND
        value: $(workspaces.dotnetconfig.bound)
      - name: DOTNETCONFIG_DIRECTORY_PATH
        value: $(workspaces.dotnetconfig.path)
      script: |
        #!/usr/bin/env bash

        set -euo pipefail

        parsing_flag=""
        for arg in "$@"; do
            if [[ "$arg" == "--env-vars" ]]; then
                parsing_flag="env-vars"
            elif [[ "$parsing_flag" == "env-vars" ]]; then
                export "$arg"
            fi
        done

        if [[ "$(workspaces.dockerconfig.bound)" == "true" ]]; then
          mkdir -p ~/.config/containers
          [[ -f "$(workspaces.dockerconfig.path)/config.json" ]] && ln -s "$(workspaces.dockerconfig.path)/config.json" ~/.config/containers/auth.json
          [[ -f "$(workspaces.dockerconfig.path)/.dockerconfigjson" ]] && ln -s "$(workspaces.dockerconfig.path)/.dockerconfigjson" ~/.config/containers/auth.json
        fi

        mkdir -p ~/src
        cp -a "$(workspaces.source.path)/." ~/src
        cd ~/src

        if [[ "${DOTNETCONFIG_DIRECTORY_BOUND}" == "true" ]] && [[ -f "${DOTNETCONFIG_DIRECTORY_PATH}/setup" ]]; then
          source "${DOTNETCONFIG_DIRECTORY_PATH}/setup"
        fi

        cat >/tmp/UseDotnetImageStreamBaseImages.targets <<'EOF'
        <Project>
          <Target Name="ComputeOpenShiftContainerBaseImage" BeforeTargets="ComputeContainerBaseImage">

            <Error Condition="'$(OpenShiftDotnetNamespace)' == ''" Text="'OpenShiftDotnetNamespace' is not set." />

            <PropertyGroup>
              <OpenShiftInternalRegistry Condition="'$(OpenShiftInternalRegistry)' == ''">image-registry.openshift-image-registry.svc:5000</OpenShiftInternalRegistry>

              <!-- Pick the proper base image from the OpenShiftDotnetNamespace namespace. -->
              <ContainerBaseImage>$(OpenShiftInternalRegistry)/$(OpenShiftDotnetNamespace)/dotnet-runtime:$(_TargetFrameworkVersionWithoutV)</ContainerBaseImage>
            </PropertyGroup>
          </Target>
        </Project>
        EOF

        export CustomBeforeDirectoryBuildProps="/tmp/CustomBeforeDirectoryBuildProps.props"
        cat >"${CustomBeforeDirectoryBuildProps}" <<'EOF'
        <Project>
          <Import Project="$(DOTNETCONFIG_DIRECTORY_PATH)/Build.props" Condition="'$(DOTNETCONFIG_DIRECTORY_BOUND)' == 'true' And Exists('$(DOTNETCONFIG_DIRECTORY_PATH)/Build.props')" />
          <Import Project="/tmp/UseDotnetImageStreamBaseImages.targets" Condition="'$(UseDotnetImageStreamBaseImages)' == 'true'"/>
        </Project>
        EOF

        # Support short names for pushing to the internal registry.
        IMAGE_NAME="$(params.IMAGE_NAME)"
        # If the name includes no repository, use the OpenShift internal repository.
        if [[ "${IMAGE_NAME%%/*}" != *.* ]]; then
            # If the name has no path component, use the current namespace.
            if [[ "${IMAGE_NAME}" != */* ]]; then
            IMAGE_NAME="$(context.taskRun.namespace)/${IMAGE_NAME}"
            fi
            IMAGE_NAME="${OpenShiftInternalRegistry}/${IMAGE_NAME}"
        fi

        # Determine properties used by the .NET SDK container tooling.
        # Extract the repository
        ContainerRegistry="${IMAGE_NAME%%/*}"
        ContainerRepository="${IMAGE_NAME#*/}"
        ContainerImageTag="latest"
        # Extract the tag (if there is one)
        if [[ "${ContainerRepository}" == *:* ]]; then
          ContainerImageTag="${ContainerRepository##*:}"
          ContainerRepository="${ContainerRepository%:*}"
        fi

        exec {STDOUT_FD}</dev/stdout # workaround https://github.com/dotnet/msbuild/issues/9617.
        dotnet publish --getProperty:GeneratedContainerDigest \
                       "/flp:logfile=/proc/self/fd/${STDOUT_FD};v=$(params.VERBOSITY)" \
                      "/p:ContainerRegistry=${ContainerRegistry}" \
                      "/p:ContainerRepository=${ContainerRepository}" \
                      "/p:ContainerImageTag=${ContainerImageTag}" /p:ImageTags= \
                      "/p:UseDotnetImageStreamBaseImages=$(params.USE_DOTNET_IMAGESTREAM_BASE_IMAGES)" \
                       /t:PublishContainer \
                       "$(params.PROJECT)" \
                       >/tmp/digest

        IMAGE_DIGEST=$(cat /tmp/digest)

        echo "${IMAGE_DIGEST}" >/tekton/results/IMAGE_DIGEST
        echo "${ContainerRegistry}/${ContainerRepository}@${IMAGE_DIGEST}" >/tekton/results/IMAGE
